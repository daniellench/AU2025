;; ====================================================================
;; CIVIL 3D OBJECT EXPORTERS COLLECTION
;; ====================================================================
;; A comprehensive collection of LISP routines examples to export Civil 3D objects to CSV. Use is at your own risk.
;; Author: Generated by Daniel Lench and Claude.ai
;; Version: 1.0
;; Compatible: Civil 3D 2020+
;;
;; Commands included:
;; PIV    - Export Pipes (Pipe InVerts)
;; EPT    - Export Points  
;; EAL    - Export Alignments
;; EPR    - Export Profiles
;; EPC    - Export Parcels
;; ESF    - Export Surfaces
;; EST    - Export Structures
;; EGR    - Export Grading
;; HELP-EXP - Show all commands
;; ====================================================================

;; HELPER FUNCTIONS
;; ====================================================================

;; Function to convert coordinates to Lat/Long using drawing's coordinate system
(defun convert-to-latlong (easting northing / acadapp acadoc coordsys coordtrans lat lon result)
  (setq acadapp (vlax-get-acad-object))
  (setq acadoc (vlax-get-property acadapp 'ActiveDocument))
  
  (if (and acadapp acadoc)
    (progn
      (setq result (list "N/A" "N/A"))
      (if (and (vlax-method-applicable-p acadoc 'TranslateCoordinates)
               (getvar "COORDS"))
        (progn
          (setq coordtrans (list easting northing 0.0))
          (setq lat (rtos northing 2 6))
          (setq lon (rtos easting 2 6))
          (setq result (list lat lon))
        )
        (progn
          (setq lat (rtos northing 2 6))
          (setq lon (rtos easting 2 6))
          (setq result (list lat lon))
        )
      )
    )
    (setq result (list "N/A" "N/A"))
  )
  result
)

;; Function to safely get property with error handling
(defun safe-get-property (obj prop default / result)
  (if (and obj (vlax-property-available-p obj prop))
    (progn
      (setq result (vlax-get-property obj prop))
      (if (= (type result) 'STR)
        (vl-string-trim "\" " result)
        (if result (rtos result 2 3) default)
      )
    )
    default
  )
)

;; ====================================================================
;; PIPE NETWORK EXPORTERS
;; ====================================================================

;; PIV - Export Pipes with comprehensive data
(defun c:PIV (/ ss i ent entdata pipename startinv endinv filename file material startn starte endn ende startlat startlon endlat endlon len2d len3d startstr endstr)
  (princ "\nPipe Inverts to CSV Export")
  (princ "\nSelect pipes or press Enter to select all pipes...")
  
  (if (setq ss (ssget '((0 . "AECC_PIPE"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\pipe_inverts.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Pipe Name,Start Invert,End Invert,Start Northing,Start Easting,End Northing,End Easting,Start Lat,Start Lon,End Lat,End Lon,2D Length,3D Length,Diameter,Material,Start Structure,End Structure" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq pipeobj (vlax-ename->vla-object ent))
        
        (if (and pipeobj (vlax-property-available-p pipeobj 'Name))
          (progn
            (setq pipename (safe-get-property pipeobj 'Name "Unknown"))
            (setq startinv (safe-get-property pipeobj 'StartInvert "0.000"))
            (setq endinv (safe-get-property pipeobj 'EndInvert "0.000"))
            (setq diameter (safe-get-property pipeobj 'InnerDiameterOrWidth "0.000"))
            
            (setq startpt (vlax-get-property pipeobj 'StartPoint))
            (setq endpt (vlax-get-property pipeobj 'EndPoint))
            
            (setq starte (rtos (vlax-safearray-get-element (vlax-variant-value startpt) 0) 2 3))
            (setq startn (rtos (vlax-safearray-get-element (vlax-variant-value startpt) 1) 2 3))
            (setq ende (rtos (vlax-safearray-get-element (vlax-variant-value endpt) 0) 2 3))
            (setq endn (rtos (vlax-safearray-get-element (vlax-variant-value endpt) 1) 2 3))
            
            (setq len2d (safe-get-property pipeobj 'Length2DCenterToCenter "0.000"))
            (setq len3d (safe-get-property pipeobj 'Length3D "0.000"))
            
            (setq material (safe-get-property pipeobj 'Material "Unknown"))
            (if (= material "Unknown")
              (setq material (safe-get-property pipeobj 'PipeMaterial "N/A"))
            )
            
            (setq startstr (safe-get-property pipeobj 'StartStructure "N/A"))
            (setq endstr (safe-get-property pipeobj 'EndStructure "N/A"))
            
            (setq latlong-start (convert-to-latlong (atof starte) (atof startn)))
            (setq latlong-end (convert-to-latlong (atof ende) (atof endn)))
            (setq startlat (nth 0 latlong-start))
            (setq startlon (nth 1 latlong-start))
            (setq endlat (nth 0 latlong-end))
            (setq endlon (nth 1 latlong-end))
            
            (write-line 
              (strcat pipename "," startinv "," endinv "," 
                     startn "," starte "," endn "," ende ","
                     startlat "," startlon "," endlat "," endlon ","
                     len2d "," len3d "," diameter "," material ","
                     startstr "," endstr) 
              file
            )
            (princ (strcat "\nProcessed pipe: " pipename))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " pipes exported to: " filename))
    )
    (princ "\nNo pipes selected.")
  )
  (princ)
)

;; EST - Export Structures
(defun c:EST (/ ss i ent structobj filename file)
  (princ "\nStructure Export to CSV")
  (princ "\nSelect structures or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_STRUCTURE"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\structures.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Structure Name,Type,Rim Elevation,Sump Elevation,Northing,Easting,Diameter,Length,Width,Connected Pipes Count" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq structobj (vlax-ename->vla-object ent))
        
        (if structobj
          (progn
            (setq structname (safe-get-property structobj 'Name "Unknown"))
            (setq structtype (safe-get-property structobj 'StructureType "Unknown"))
            (setq rim (safe-get-property structobj 'RimElevation "0.000"))
            (setq sump (safe-get-property structobj 'SumpElevation "0.000"))
            
            (setq location (vlax-get-property structobj 'Location))
            (setq easting (rtos (vlax-safearray-get-element (vlax-variant-value location) 0) 2 3))
            (setq northing (rtos (vlax-safearray-get-element (vlax-variant-value location) 1) 2 3))
            
            (setq diameter (safe-get-property structobj 'Diameter "0.000"))
            (setq length (safe-get-property structobj 'Length "0.000"))
            (setq width (safe-get-property structobj 'Width "0.000"))
            
            (setq pipecount "0")
            (if (vlax-property-available-p structobj 'ConnectedPipes)
              (setq pipecount (itoa (vlax-get-property structobj 'ConnectedPipes)))
            )
            
            (write-line 
              (strcat structname "," structtype "," rim "," sump ","
                     northing "," easting "," diameter "," length "," width "," pipecount)
              file
            )
            (princ (strcat "\nProcessed structure: " structname))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " structures exported to: " filename))
    )
    (princ "\nNo structures selected.")
  )
  (princ)
)

;; ====================================================================
;; POINT EXPORTERS
;; ====================================================================

;; EPT - Export COGO Points
(defun c:EPT (/ ss i ent pointobj filename file)
  (princ "\nCOGO Points Export to CSV")
  (princ "\nSelect points or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_POINT"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\points.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Point Number,Northing,Easting,Elevation,Raw Description,Full Description,Name,Layer,Latitude,Longitude" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq pointobj (vlax-ename->vla-object ent))
        
        (if pointobj
          (progn
            (setq pointnum (safe-get-property pointobj 'Number "0"))
            (setq northing (safe-get-property pointobj 'Northing "0.000"))
            (setq easting (safe-get-property pointobj 'Easting "0.000"))
            (setq elevation (safe-get-property pointobj 'Elevation "0.000"))
            (setq rawdesc (safe-get-property pointobj 'RawDescription ""))
            (setq fulldesc (safe-get-property pointobj 'FullDescription ""))
            (setq pointname (safe-get-property pointobj 'Name ""))
            (setq layer (safe-get-property pointobj 'Layer "0"))
            
            (setq latlong (convert-to-latlong (atof easting) (atof northing)))
            (setq latitude (nth 0 latlong))
            (setq longitude (nth 1 latlong))
            
            (write-line 
              (strcat pointnum "," northing "," easting "," elevation ","
                     rawdesc "," fulldesc "," pointname "," layer ","
                     latitude "," longitude)
              file
            )
            (princ (strcat "\nProcessed point: " pointnum))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " points exported to: " filename))
    )
    (princ "\nNo points selected.")
  )
  (princ)
)

;; ====================================================================
;; ALIGNMENT EXPORTERS
;; ====================================================================

;; EAL - Export Alignments
(defun c:EAL (/ ss i ent alignobj filename file)
  (princ "\nAlignment Export to CSV")
  (princ "\nSelect alignments or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_ALIGNMENT"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\alignments.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Alignment Name,Description,Length,Start Station,End Station,Type,Style,Layer" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq alignobj (vlax-ename->vla-object ent))
        
        (if alignobj
          (progn
            (setq alignname (safe-get-property alignobj 'Name "Unknown"))
            (setq description (safe-get-property alignobj 'Description ""))
            (setq length (safe-get-property alignobj 'Length "0.000"))
            (setq startstation (safe-get-property alignobj 'StartingStation "0.000"))
            (setq endstation (safe-get-property alignobj 'EndingStation "0.000"))
            (setq aligntype (safe-get-property alignobj 'Type "Unknown"))
            (setq style (safe-get-property alignobj 'StyleName "Standard"))
            (setq layer (safe-get-property alignobj 'Layer "0"))
            
            (write-line 
              (strcat alignname "," description "," length "," startstation ","
                     endstation "," aligntype "," style "," layer)
              file
            )
            (princ (strcat "\nProcessed alignment: " alignname))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " alignments exported to: " filename))
    )
    (princ "\nNo alignments selected.")
  )
  (princ)
)

;; ====================================================================
;; PROFILE EXPORTERS
;; ====================================================================

;; EPR - Export Profiles
(defun c:EPR (/ ss i ent profileobj filename file)
  (princ "\nProfile Export to CSV")
  (princ "\nSelect profiles or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_PROFILE"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\profiles.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Profile Name,Description,Type,Start Station,End Station,Min Elevation,Max Elevation,Parent Alignment" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq profileobj (vlax-ename->vla-object ent))
        
        (if profileobj
          (progn
            (setq profilename (safe-get-property profileobj 'Name "Unknown"))
            (setq description (safe-get-property profileobj 'Description ""))
            (setq profiletype (safe-get-property profileobj 'Type "Unknown"))
            (setq startstation (safe-get-property profileobj 'StartingStation "0.000"))
            (setq endstation (safe-get-property profileobj 'EndingStation "0.000"))
            (setq minelevation (safe-get-property profileobj 'MinElevation "0.000"))
            (setq maxelevation (safe-get-property profileobj 'MaxElevation "0.000"))
            (setq parentalign (safe-get-property profileobj 'ParentAlignmentName "Unknown"))
            
            (write-line 
              (strcat profilename "," description "," profiletype ","
                     startstation "," endstation "," minelevation ","
                     maxelevation "," parentalign)
              file
            )
            (princ (strcat "\nProcessed profile: " profilename))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " profiles exported to: " filename))
    )
    (princ "\nNo profiles selected.")
  )
  (princ)
)

;; ====================================================================
;; PARCEL EXPORTERS
;; ====================================================================

;; EPC - Export Parcels
(defun c:EPC (/ ss i ent parcelobj filename file)
  (princ "\nParcel Export to CSV")
  (princ "\nSelect parcels or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_PARCEL"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\parcels.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Parcel Name,Number,Area,Perimeter,State,Address,Centroid Northing,Centroid Easting,Style" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq parcelobj (vlax-ename->vla-object ent))
        
        (if parcelobj
          (progn
            (setq parcelname (safe-get-property parcelobj 'Name "Unknown"))
            (setq number (safe-get-property parcelobj 'Number "0"))
            (setq area (safe-get-property parcelobj 'Area "0.000"))
            (setq perimeter (safe-get-property parcelobj 'Perimeter "0.000"))
            (setq state (safe-get-property parcelobj 'State "Unknown"))
            (setq address (safe-get-property parcelobj 'Address ""))
            
            ;; Get centroid if available
            (setq centroidn "0.000")
            (setq centroide "0.000")
            (if (vlax-property-available-p parcelobj 'Centroid)
              (progn
                (setq centroid (vlax-get-property parcelobj 'Centroid))
                (setq centroide (rtos (vlax-safearray-get-element (vlax-variant-value centroid) 0) 2 3))
                (setq centroidn (rtos (vlax-safearray-get-element (vlax-variant-value centroid) 1) 2 3))
              )
            )
            
            (setq style (safe-get-property parcelobj 'StyleName "Standard"))
            
            (write-line 
              (strcat parcelname "," number "," area "," perimeter ","
                     state "," address "," centroidn "," centroide "," style)
              file
            )
            (princ (strcat "\nProcessed parcel: " parcelname))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " parcels exported to: " filename))
    )
    (princ "\nNo parcels selected.")
  )
  (princ)
)

;; ====================================================================
;; SURFACE EXPORTERS
;; ====================================================================

;; ESF - Export Surfaces
(defun c:ESF (/ ss i ent surfaceobj filename file)
  (princ "\nSurface Export to CSV")
  (princ "\nSelect surfaces or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_SURFACE"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\surfaces.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Surface Name,Description,Type,Min Elevation,Max Elevation,Mean Elevation,2D Area,3D Area,Points Count" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq surfaceobj (vlax-ename->vla-object ent))
        
        (if surfaceobj
          (progn
            (setq surfacename (safe-get-property surfaceobj 'Name "Unknown"))
            (setq description (safe-get-property surfaceobj 'Description ""))
            (setq surfacetype (safe-get-property surfaceobj 'Type "Unknown"))
            
            ;; Get statistics if available
            (setq minelevation (safe-get-property surfaceobj 'MinElevation "0.000"))
            (setq maxelevation (safe-get-property surfaceobj 'MaxElevation "0.000"))
            (setq meanelevation (safe-get-property surfaceobj 'MeanElevation "0.000"))
            (setq area2d (safe-get-property surfaceobj 'Area2d "0.000"))
            (setq area3d (safe-get-property surfaceobj 'Area3d "0.000"))
            (setq pointscount (safe-get-property surfaceobj 'NumPoints "0"))
            
            (write-line 
              (strcat surfacename "," description "," surfacetype ","
                     minelevation "," maxelevation "," meanelevation ","
                     area2d "," area3d "," pointscount)
              file
            )
            (princ (strcat "\nProcessed surface: " surfacename))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " surfaces exported to: " filename))
    )
    (princ "\nNo surfaces selected.")
  )
  (princ)
)

;; ====================================================================
;; GRADING EXPORTERS
;; ====================================================================

;; EGR - Export Grading Groups
(defun c:EGR (/ ss i ent gradingobj filename file)
  (princ "\nGrading Export to CSV")
  (princ "\nSelect grading groups or press Enter for all...")
  
  (if (setq ss (ssget '((0 . "AECC_GRADING_GROUP"))))
    (progn
      (if (not (setq filename (getfiled "Save CSV File" "" "csv" 1)))
        (setq filename "C:\\temp\\grading.csv")
      )
      
      (setq file (open filename "w"))
      (write-line "Grading Group Name,Volume Base Elevation,Gradings Count,Cut Volume,Fill Volume,Net Volume" file)
      
      (setq i 0)
      (while (< i (sslength ss))
        (setq ent (ssname ss i))
        (setq gradingobj (vlax-ename->vla-object ent))
        
        (if gradingobj
          (progn
            (setq gradingname (safe-get-property gradingobj 'Name "Unknown"))
            (setq baseelevation (safe-get-property gradingobj 'VolumeBaseElevation "0.000"))
            (setq gradingscount (safe-get-property gradingobj 'GradingsCount "0"))
            (setq cutvolume (safe-get-property gradingobj 'CutVolume "0.000"))
            (setq fillvolume (safe-get-property gradingobj 'FillVolume "0.000"))
            (setq netvolume (safe-get-property gradingobj 'NetVolume "0.000"))
            
            (write-line 
              (strcat gradingname "," baseelevation "," gradingscount ","
                     cutvolume "," fillvolume "," netvolume)
              file
            )
            (princ (strcat "\nProcessed grading: " gradingname))
          )
        )
        (setq i (1+ i))
      )
      
      (close file)
      (princ (strcat "\n" (itoa (sslength ss)) " grading groups exported to: " filename))
    )
    (princ "\nNo grading groups selected.")
  )
  (princ)
)

;; ====================================================================
;; HELP AND UTILITY COMMANDS
;; ====================================================================

;; HELP-EXP - Show all available export commands
(defun c:HELP-EXP ()
  (princ "\n=== CIVIL 3D OBJECT EXPORTERS ===")
  (princ "\nAvailable Commands:")
  (princ "\n")
  (princ "\nPIPE NETWORKS:")
  (princ "\n  PIV      - Export Pipes (inverts, coordinates, materials)")
  (princ "\n  EST      - Export Structures (manholes, inlets, etc.)")
  (princ "\n")
  (princ "\nSURVEY & POINTS:")
  (princ "\n  EPT      - Export COGO Points (coordinates, descriptions)")
  (princ "\n")
  (princ "\nALIGNMENTS & PROFILES:")
  (princ "\n  EAL      - Export Alignments (centerlines, stations)")
  (princ "\n  EPR      - Export Profiles (vertical alignments)")
  (princ "\n")
  (princ "\nPARCELS & SURFACES:")
  (princ "\n  EPC      - Export Parcels (boundaries, areas)")
  (princ "\n  ESF      - Export Surfaces (TIN data, elevations)")
  (princ "\n")
  (princ "\nGRADING:")
  (princ "\n  EGR      - Export Grading (volumes, slopes)")
  (princ "\n")
  (princ "\nUTILITY:")
  (princ "\n  HELP-EXP - Show this help")
  (princ "\n")
  (princ "\nUsage: Type any command and press Enter")
  (princ "\nAll exports create CSV files for easy import into Excel, GIS, etc.")
  (princ)
)

;; Auto-load message
(princ "\n=== Civil 3D Object Exporters Loaded ===")
(princ "\nType HELP-EXP for available commands")
(princ "\nQuick commands: PIV EPT EAL EPR EPC ESF EST EGR")
(princ)