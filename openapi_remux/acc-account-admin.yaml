openapi: 3.0.3
info:
  title: ACC Account Administration API
  description: |
    Comprehensive OpenAPI specification for Autodesk Construction Cloud (ACC) 
    Account Administration APIs. Covers account-level administrative operations 
    including project setup, user management, role assignments, and product access 
    configuration.
    
    üìö BASED ON:
    - ACC Account Admin Postman collection
    - Official Autodesk APS documentation
    - Real-world implementation experience
    
    üîê AUTHENTICATION:
    OAuth authentication is handled by a separate specification.
    See aps-oauth.yaml for complete OAuth flow documentation.
    
    üìñ OFFICIAL DOCUMENTATION REFERENCES:
    
    üèóÔ∏è Project Management:
    - GET /construction/admin/v1/accounts/{accountId}/projects - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-accounts-accountidprojects-GET
    - GET /construction/admin/v1/projects/{projectId} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-projectsprojectId-GET
    - POST /construction/admin/v1/accounts/{accountId}/projects - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-accounts-accountidprojects-POST
    - PATCH /projects/{project_id}/image - https://aps.autodesk.com/en/docs/acc/v1/reference/http/projects-:project_id-image-PATCH
    
    üè¢ Company Management:
    - POST /companies - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-POST
    - POST /companies/import - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-import-POST
    - GET /companies (legacy) - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-GET-legacy
    - GET /companies - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-GET
    - GET /companies/{company_id} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-:company_id-GET
    - GET /companies/search - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-search-GET
    - GET /projects/{project_id}/companies - https://aps.autodesk.com/en/docs/acc/v1/reference/http/projects-:project_id-companies-GET
    - PATCH /companies/{company_id} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-:company_id-PATCH
    - PATCH /companies/{company_id}/image - https://aps.autodesk.com/en/docs/acc/v1/reference/http/companies-:company_id-image-PATCH
    
    üë• User Management:
    - POST /construction/admin/v1/users - https://aps.autodesk.com/en/docs/acc/v1/reference/http/users-POST
    - POST /construction/admin/v1/users/import - https://aps.autodesk.com/en/docs/acc/v1/reference/http/users-import-POST
    - GET /construction/admin/v1/users - https://aps.autodesk.com/en/docs/acc/v1/reference/http/users-GET
    - GET /construction/admin/v1/users/{user_id} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/users-:user_id-GET
    - GET /construction/admin/v1/users/{userId}/projects - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-usersuseridprojects-GET
    - GET /construction/admin/v1/users/{userId}/products - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-usersuseridproducts-GET
    - GET /construction/admin/v1/users/{userId}/roles - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-usersuseridroles-GET
    - GET /construction/admin/v1/users/search - https://aps.autodesk.com/en/docs/acc/v1/reference/http/users-search-GET
    - PATCH /construction/admin/v1/users/{user_id} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/users-:user_id-PATCH
    
    üîó Project User Assignment:
    - GET /construction/admin/v1/projects/{projectId}/users - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-projectsprojectId-users-GET
    - GET /construction/admin/v1/projects/{projectId}/users/{userId} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-projectsprojectId-users-userId-GET
    - POST /construction/admin/v1/projects/{projectId}/users - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-projects-project-Id-users-POST
    - POST /construction/admin/v2/projects/{projectId}/users:import - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-v2-projects-project-Id-users-import-POST
    - PATCH /construction/admin/v1/projects/{projectId}/users/{userId} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-projects-project-Id-users-userId-PATCH
    - DELETE /construction/admin/v1/projects/{projectId}/users/{userId} - https://aps.autodesk.com/en/docs/acc/v1/reference/http/admin-projects-project-Id-users-userId-DELETE
    
    üèóÔ∏è Business Structure:
    - PUT /business_units_structure - https://aps.autodesk.com/en/docs/acc/v1/reference/http/business_units_structure-PUT
    - GET /business_units_structure - https://aps.autodesk.com/en/docs/acc/v1/reference/http/business_units_structure-GET
    
    ‚ö†Ô∏è IMPORTANT NOTES:
    - Do NOT use deprecated BIM360 APIs or @aps_sdk packages
    - This spec is the authoritative source for ACC API integration
    - Autodesk maintains multiple API versions (v1, v2) concurrently
    - Use v2 endpoints when available (generally preferred)
    
    üë• AUTHORS:
    Co-authored by Daniel Lench and Claude
    
    ‚öñÔ∏è DISCLAIMER:
    This specification is provided "as-is" and may contain errors or inaccuracies.
    Use at your own risk. No warranties or guarantees are provided. Always verify 
    against official Autodesk documentation and test thoroughly in your environment.
  version: 1.1.0
  contact:
    name: Autodesk Platform Services
    url: https://aps.autodesk.com
servers:
  - url: https://developer.api.autodesk.com
    description: Autodesk Platform Services Production API
paths:
  /health:
    get:
      summary: Health check endpoint
      description: Basic health check for the API
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object

  /project/v1/hubs:
    get:
      summary: Get ACC hubs/accounts
      description: Retrieve all ACC hubs (accounts) accessible to the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: filter[name]
          in: query
          schema:
            type: string
          description: Filter hubs by account name
      responses:
        '200':
          description: List of ACC hubs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: hubs
                        id:
                          type: string
                          description: Hub ID with 'b.' prefix for ACC hubs
                          example: b.{accountId}
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: Company Name
                            extension:
                              type: object
                              properties:
                                type:
                                  type: string
                                  example: hubs:autodesk.bim360:Account

  /hq/v1/accounts/{accountId}/users/search:
    get:
      summary: Search users in account
      description: Find users in the master member directory of a specific ACC account
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ACC account ID (without 'b.' prefix)
        - name: email
          in: query
          schema:
            type: string
            format: email
          description: Filter by email address
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip for pagination
      responses:
        '200':
          description: Users matching search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

  /construction/admin/v1/accounts/{accountId}/projects:
    get:
      summary: Get projects in account
      description: Retrieve all projects within a specific ACC account
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: filter[name]
          in: query
          schema:
            type: string
          description: Filter projects by name
        - name: filter[status]
          in: query
          schema:
            type: string
            enum: [active, inactive, pending]
          description: Filter projects by status
        - name: filter[classification]
          in: query
          schema:
            type: string
            enum: [template, production]
          description: Filter projects by classification
        - name: filter[type]
          in: query
          schema:
            type: string
          description: Filter projects by type (e.g., "Template Project")
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 20
          description: Maximum number of projects to return per page
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of projects to skip for pagination
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, -name, startDate, -startDate, status, -status]
            default: name
          description: Sort order for projects
        - name: filterTextMatch
          in: query
          schema:
            type: string
            enum: [contains, startsWith, exact]
            default: contains
          description: Text matching strategy for filters
      responses:
        '200':
          description: Paginated list of projects in the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                        description: Maximum number of results per page
                        example: 20
                      offset:
                        type: integer
                        description: Number of results skipped
                        example: 0
                      totalResults:
                        type: integer
                        description: Total number of projects in the account
                        example: 250
                      nextUrl:
                        type: string
                        format: uri
                        description: URL for the next page of results (if available)
                        example: "https://developer.api.autodesk.com/construction/admin/v1/accounts/{accountId}/projects?limit=20&offset=20"

    post:
      summary: Create new project
      description: Create a new project from a template within an ACC account
      security:
        - BearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the new project
                startDate:
                  type: string
                  format: date
                  example: "2010-01-01"
                endDate:
                  type: string
                  format: date
                  example: "2015-12-31"
                type:
                  type: string
                  description: Project type
                  example: "School"
                projectValue:
                  type: object
                  properties:
                    value:
                      type: number
                      example: 1650000
                    currency:
                      type: string
                      example: "USD"
                jobNumber:
                  type: string
                  example: "HP-0002"
                addressLine1:
                  type: string
                  example: "123 Main Street"
                addressLine2:
                  type: string
                  example: "Suite 2"
                city:
                  type: string
                  example: "San Francisco"
                stateOrProvince:
                  type: string
                  example: "California"
                postalCode:
                  type: string
                  example: "94001"
                country:
                  type: string
                  example: "United States"
                timezone:
                  type: string
                  example: "America/Los_Angeles"
                constructionType:
                  type: string
                  example: "New Construction"
                deliveryMethod:
                  type: string
                  example: "Unit Price"
                currentPhase:
                  type: string
                  example: "Design"
                template:
                  type: object
                  properties:
                    projectId:
                      type: string
                      format: uuid
                      description: ID of the template project to copy from
              required:
                - name
                - type
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /construction/admin/v1/projects/{projectId}:
    get:
      summary: Get project details
      description: Retrieve detailed information about a specific project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /construction/admin/v1/projects/{projectId}/users:
    get:
      summary: Get project users
      description: Retrieve all users assigned to a specific project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of project users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectUser'

    post:
      summary: Assign single user to project
      description: Add a single user to a project with specified product access
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                products:
                  $ref: '#/components/schemas/ProductAccessArray'
              required:
                - email
                - products
      responses:
        '200':
          description: User assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'

  '/construction/admin/v2/projects/{projectId}/users:import':
    post:
      summary: Bulk assign users to project
      description: |
        Import multiple users to a project with specified product access and role assignments.
        
        IMPORTANT: Users must include roleIds array with at least the default role ID.
        The first role ID should always be the user's default role (from user profile),
        followed by any project-specific role IDs.
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      roleIds:
                        type: array
                        description: |
                          Array of role UUIDs. MUST include at least the user's default role ID.
                          First element should be the default role, followed by any project-specific roles.
                        minItems: 1
                        items:
                          type: string
                          format: uuid
                      products:
                        $ref: '#/components/schemas/ProductAccessArray'
                    required:
                      - email
                      - roleIds
                      - products
              required:
                - users
      responses:
        '200':
          description: Users imported successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectUser'

  /construction/admin/v1/projects/{projectId}/users/{userId}:
    get:
      summary: Get project user details
      description: Retrieve detailed information about a specific user in a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
                
    patch:
      summary: Update user product access
      description: Update a user's product access permissions within a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "08695baa-f417-428b-abf1-a4ac181734bf"
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "1c44eca6-8d11-43c0-b71a-cd4397d1a383"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  $ref: '#/components/schemas/ProductAccessArray'
              required:
                - products
            examples:
              admin_user:
                summary: Administrator User (admin@company.com)
                description: Full administrator access to all purchased products
                value:
                  products:
                    - key: "projectAdministration"
                      access: "administrator"
                    - key: "docs"
                      access: "administrator"
                    - key: "insight"
                      access: "administrator"
                    - key: "takeoff"
                      access: "administrator"
                    - key: "designCollaboration"
                      access: "administrator"
                    - key: "modelCoordination"
                      access: "none"
                    - key: "build"
                      access: "administrator"
                    - key: "autoSpecs"
                      access: "none"
                    - key: "cost"
                      access: "none"
                    - key: "financials"
                      access: "none"
                    - key: "capitalPlanning"
                      access: "none"
                    - key: "buildingConnected"
                      access: "none"
              regular_user:
                summary: Regular User (user@company.com)
                description: Member access to core products, no project administration
                value:
                  products:
                    - key: "projectAdministration"
                      access: "none"
                    - key: "docs"
                      access: "member"
                    - key: "insight"
                      access: "member"
                    - key: "takeoff"
                      access: "member"
                    - key: "designCollaboration"
                      access: "member"
                    - key: "modelCoordination"
                      access: "member"
                    - key: "build"
                      access: "member"
                    - key: "autoSpecs"
                      access: "member"
                    - key: "cost"
                      access: "none"
                    - key: "financials"
                      access: "none"
                    - key: "capitalPlanning"
                      access: "none"
                    - key: "buildingConnected"
                      access: "none"
              limited_access_user:
                summary: Limited Access User
                description: Basic access demonstrating business rule constraints
                value:
                  products:
                    - key: "projectAdministration"
                      access: "none"
                    - key: "docs"
                      access: "member"
                    - key: "insight"
                      access: "member"
                    - key: "takeoff"
                      access: "member"
                    - key: "designCollaboration"
                      access: "member"
                    - key: "modelCoordination"
                      access: "none"
                    - key: "build"
                      access: "none"
                    - key: "autoSpecs"
                      access: "none"
                    - key: "cost"
                      access: "none"
                    - key: "financials"
                      access: "none"
                    - key: "capitalPlanning"
                      access: "none"
                    - key: "buildingConnected"
                      access: "none"
      responses:
        '200':
          description: User access updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
              examples:
                updated_user:
                  summary: Updated User Response
                  value:
                    id: "1c44eca6-8d11-43c0-b71a-cd4397d1a383"
                    email: "user@company.com"
                    firstName: "Regular"
                    lastName: "User"
                    role_id: "role123-456-789"
                    company_id: "comp456-789-012"
                    status: "active"
                    products:
                      - key: "projectAdministration"
                        access: "none"
                      - key: "docs"
                        access: "member"
                      - key: "insight"
                        access: "member"
                      - key: "takeoff"
                        access: "member"
                      - key: "designCollaboration"
                        access: "member"
                      - key: "modelCoordination"
                        access: "none"
                      - key: "build"
                        access: "member"
                      - key: "autoSpecs"
                        access: "none"
                      - key: "cost"
                        access: "none"
                      - key: "financials"
                        access: "none"
                      - key: "capitalPlanning"
                        access: "none"
                      - key: "buildingConnected"
                        access: "none"
                
    delete:
      summary: Remove user from project
      description: Remove a specific user from a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User removed successfully

  /data-connector/v1/accounts/{accountId}/requests:
    get:
      summary: Get data export requests
      description: |
        Returns array of Data Connector requests created by authenticated user.
        Supports filtering, sorting, and pagination.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The account ID
        - name: sort
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order for results
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of objects to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number to skip
        - name: projectId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by project ID
        - name: sortFields
          in: query
          schema:
            type: string
          description: Comma-separated field names to sort by
        - name: filter[field_to_filter]
          in: query
          schema:
            type: string
          description: Filter by specific field values
      responses:
        '200':
          description: List of data export requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataConnectorRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    post:
      summary: Create data export request
      description: |
        Create a new data export request for ACC data.
        Returns a request ID that spawns jobs for data extraction.
        
        Rate Limits:
        - Maximum 24 jobs per account/user per 24 hours
        
        Authentication:
        - Requires user context (three-legged OAuth)
        - OAuth Scopes: data:create
      security:
        - BearerAuth: [data:create]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: The account ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Description of the export request
                  example: "Monthly admin data export"
                isActive:
                  type: boolean
                  default: true
                  description: Whether the request is active
                serviceGroups:
                  type: array
                  items:
                    type: string
                    enum: [admin, issues, cost]
                  description: |
                    Services to include in export:
                    - admin: User and project administration data
                    - issues: Issues management data
                    - cost: Cost management data
                  example: ["admin", "issues"]
                scheduleInterval:
                  type: string
                  enum: [ONE_TIME, DAILY, WEEKLY, MONTHLY]
                  default: ONE_TIME
                  description: Schedule for recurring exports
                reoccuringInterval:
                  type: string
                  nullable: true
                  description: Recurring interval details (null for ONE_TIME)
                effectiveFrom:
                  type: string
                  format: date-time
                  description: When the recurring schedule starts
                  example: "2020-11-06T19:09:40.106Z"
                effectiveTo:
                  type: string
                  format: date-time
                  description: When the recurring schedule ends
                  example: "2020-11-12T19:09:40.106Z"
                callbackUrl:
                  type: string
                  format: uri
                  description: URL to receive callback when export completes
                sendEmail:
                  type: boolean
                  default: true
                  description: Send email notification on completion
                projectId:
                  type: string
                  format: uuid
                  nullable: true
                  description: Specific project to export (null for all projects)
                projectIdList:
                  type: string
                  description: Comma-separated list of project IDs
                startDate:
                  type: string
                  format: date-time
                  description: Start date for data export range
                  example: "2023-06-06T00:00:00.000Z"
                endDate:
                  type: string
                  format: date-time
                  description: End date for data export range
                  example: "2023-06-06T12:00:00.000Z"
                dateRange:
                  type: string
                  enum: [LAST_WEEK, LAST_MONTH, LAST_QUARTER, CUSTOM]
                  description: Predefined date range (alternative to startDate/endDate)
                  example: "LAST_MONTH"
                projectStatus:
                  type: string
                  enum: [active, inactive, pending]
                  default: active
                  description: Filter projects by status
              required:
                - description
                - serviceGroups
      responses:
        '201':
          description: Export request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConnectorRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /data-connector/v1/accounts/{accountId}/requests/{requestId}:
    get:
      summary: Get specific data export request
      description: Returns details of a specific Data Connector request.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Data export request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConnectorRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    patch:
      summary: Update data export request
      description: Modify an existing data export request.
      security:
        - BearerAuth: [data:create]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                isActive:
                  type: boolean
                scheduleInterval:
                  type: string
                  enum: [ONE_TIME, DAILY, WEEKLY, MONTHLY]
                callbackUrl:
                  type: string
                  format: uri
                sendEmail:
                  type: boolean
      responses:
        '200':
          description: Request updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConnectorRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete data export request
      description: Delete a specific data export request.
      security:
        - BearerAuth: [data:create]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Request deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /data-connector/v1/accounts/{accountId}/requests/{requestId}/jobs:
    get:
      summary: Get jobs for specific request
      description: Returns array of jobs spawned by a specific data export request.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of jobs for the request
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataConnectorJob'

  /data-connector/v1/accounts/{accountId}/jobs:
    get:
      summary: Get export jobs
      description: |
        Returns array of Data Connector jobs spawned by requests from authenticated user.
        Supports filtering, sorting, and pagination.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order for results
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of objects to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number to skip
        - name: projectId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by project ID
        - name: sortFields
          in: query
          schema:
            type: string
          description: Comma-separated field names to sort by
        - name: filter[field_to_filter]
          in: query
          schema:
            type: string
          description: Filter by specific field values
      responses:
        '200':
          description: List of export jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataConnectorJob'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /data-connector/v1/accounts/{accountId}/jobs/{jobId}:
    get:
      summary: Get job details
      description: |
        Get details of a completed export job.
        Requires user context with data:read scope.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConnectorJob'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    delete:
      summary: Delete job
      description: Delete a specific export job.
      security:
        - BearerAuth: [data:create]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Job deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /data-connector/v1/accounts/{accountId}/jobs/{jobId}/data-listing:
    get:
      summary: Get job data listing
      description: |
        Get the list of available data files for a completed job.
        This endpoint provides metadata about available downloads.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of available data files
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: File name (typically a ZIP file)
                          example: "export_data.zip"
                        size:
                          type: integer
                          description: File size in bytes
                          example: 1048576
                        lastModified:
                          type: string
                          format: date-time
                          description: When the file was last modified
                          example: "2020-11-06T19:15:40.106Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /data-connector/v1/accounts/{accountId}/jobs/{jobId}/data/{name}:
    get:
      summary: Download export data
      description: |
        Download the exported data file (typically ZIP).
        Requires user context with data:read scope.
      security:
        - BearerAuth: [data:read]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: File name from job data list
      responses:
        '200':
          description: File download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  # User Management APIs (based on extracted documentation)
  /construction/admin/v1/users:
    get:
      summary: Get users
      description: |
        Retrieve all users in an ACC account.
        Supports filtering, sorting, and pagination.
      security:
        - BearerAuth: [account:read]
      parameters:
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
        - name: User-Id
          in: header
          schema:
            type: string
            format: uuid
          description: User ID for impersonation (optional)
        - name: sort
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: filter[email]
          in: query
          schema:
            type: string
          description: Filter by email address
        - name: filter[status]
          in: query
          schema:
            type: string
            enum: [active, pending, inactive]
          description: Filter by user status
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/DetailedUser'

    post:
      summary: Create user
      description: |
        Create a new user in an ACC account.
        Supports suppressing administrative emails.
      security:
        - BearerAuth: [account:write]
      parameters:
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
        - name: User-Id
          in: header
          schema:
            type: string
            format: uuid
          description: User ID for impersonation (optional)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: User's email address
                companyId:
                  type: string
                  format: uuid
                  description: Company ID (optional)
                roleIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of role IDs to assign
                suppressAdministrativeEmails:
                  type: boolean
                  default: false
                  description: Suppress administrative email notifications
              required:
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedUser'

  /construction/admin/v1/users/import:
    post:
      summary: Bulk import users
      description: |
        Import multiple users in a single operation.
        Supports batch creation with role assignments.
      security:
        - BearerAuth: [account:write]
      parameters:
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
        - name: User-Id
          in: header
          schema:
            type: string
            format: uuid
          description: User ID for impersonation (optional)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                        maxLength: 255
                      companyId:
                        type: string
                        format: uuid
                      roleIds:
                        type: array
                        items:
                          type: string
                          format: uuid
                    required:
                      - email
                suppressAdministrativeEmails:
                  type: boolean
                  default: false
              required:
                - users
      responses:
        '201':
          description: Users imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  imported:
                    type: array
                    items:
                      $ref: '#/components/schemas/DetailedUser'
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                        error:
                          type: string

  /construction/admin/v1/users/{userId}:
    get:
      summary: Get specific user
      description: Get details of a specific user by ID.
      security:
        - BearerAuth: [account:read]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedUser'

    patch:
      summary: Update user
      description: |
        Update user information including profile details.
        Supports partial updates.
      security:
        - BearerAuth: [account:write]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
        - name: User-Id
          in: header
          schema:
            type: string
            format: uuid
          description: User ID for impersonation (optional)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                jobTitle:
                  type: string
                phone:
                  type: object
                  properties:
                    number:
                      type: string
                    phoneType:
                      type: string
                      enum: [home, mobile, office]
                    extension:
                      type: string
                addressLine1:
                  type: string
                addressLine2:
                  type: string
                city:
                  type: string
                stateOrProvince:
                  type: string
                postalCode:
                  type: string
                country:
                  type: string
                industry:
                  type: string
                aboutMe:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedUser'

  /construction/admin/v1/users/{userId}/products:
    get:
      summary: Get user's product assignments
      description: Get all product assignments for a specific user across all projects.
      security:
        - BearerAuth: [account:read]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
      responses:
        '200':
          description: User's product assignments
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        projectId:
                          type: string
                          format: uuid
                        projectName:
                          type: string
                        products:
                          $ref: '#/components/schemas/ProductAccessArray'

  /construction/admin/v1/users/{userId}/projects:
    get:
      summary: Get user's project assignments
      description: Get all projects that a specific user is assigned to.
      security:
        - BearerAuth: [account:read]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
      responses:
        '200':
          description: User's project assignments
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        projectId:
                          type: string
                          format: uuid
                        projectName:
                          type: string
                        roleIds:
                          type: array
                          items:
                            type: string
                            format: uuid
                        status:
                          type: string
                          enum: [active, pending, inactive]

  /construction/admin/v1/users/{userId}/roles:
    get:
      summary: Get user's role assignments
      description: Get all role assignments for a specific user.
      security:
        - BearerAuth: [account:read]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
      responses:
        '200':
          description: User's role assignments
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        roleId:
                          type: string
                          format: uuid
                        roleName:
                          type: string
                        scope:
                          type: string
                          enum: [account, project]
                        projectId:
                          type: string
                          format: uuid
                          nullable: true
                          description: Project ID if scope is project

  /construction/admin/v1/users/search:
    get:
      summary: Search users
      description: |
        Search for users using various criteria.
        Supports fuzzy matching and filtering.
      security:
        - BearerAuth: [account:read]
      parameters:
        - name: email
          in: query
          schema:
            type: string
            format: email
          description: Search by email address
        - name: name
          in: query
          schema:
            type: string
          description: Search by first name or last name
        - name: company
          in: query
          schema:
            type: string
          description: Search by company name
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: Region
          in: header
          schema:
            type: string
            enum: [US, EMEA]
          description: Geographic region for the request
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/DetailedUser'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Bearer token obtained from /authentication/v2/token endpoint.
        Include as: Authorization: Bearer {access_token}

  responses:
    BadRequest:
      description: Bad Request - Invalid parameters or malformed syntax
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request parameters"
              code:
                type: integer
                example: 400
    
    Unauthorized:
      description: Unauthorized - Invalid bearer token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or expired token"
              code:
                type: integer
                example: 401
    
    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access denied"
              code:
                type: integer
                example: 403
    
    NotFound:
      description: Not Found - Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"
              code:
                type: integer
                example: 404
    
    TooManyRequests:
      description: Too Many Requests - Rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Rate limit exceeded. Maximum 24 jobs per account/user per 24 hours"
              code:
                type: integer
                example: 429
    
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"
              code:
                type: integer
                example: 500
    
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Service temporarily unavailable"
              code:
                type: integer
                example: 503

  schemas:
    PaginationInfo:
      type: object
      properties:
        limit:
          type: integer
          description: Maximum number of results per page
          example: 20
        offset:
          type: integer
          description: Number of results skipped
          example: 0
        totalResults:
          type: integer
          description: Total number of results available
          example: 100
      required:
        - limit
        - offset
        - totalResults

    DataConnectorRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique request ID
          example: "c8af2612-774b-432a-a6c7-69c8b636ae18"
        description:
          type: string
          description: Description of the export request
          example: "Monthly admin data export"
        isActive:
          type: boolean
          description: Whether the request is active
          example: true
        accountId:
          type: string
          format: uuid
          description: Account ID
          example: "ff6f7683-db6a-4dd7-8c11-27227b336995"
        projectId:
          type: string
          format: uuid
          nullable: true
          description: Specific project ID (null for all projects)
        projectIdList:
          type: string
          nullable: true
          description: Comma-separated list of project IDs
        createdBy:
          type: string
          format: uuid
          description: User ID who created the request
        createdByEmail:
          type: string
          format: email
          description: Email of user who created the request
        createdAt:
          type: string
          format: date-time
          description: When the request was created
          example: "2020-11-06T19:09:40.106Z"
        updatedBy:
          type: string
          format: uuid
          description: User ID who last updated the request
        updatedAt:
          type: string
          format: date-time
          description: When the request was last updated
          example: "2020-11-06T19:09:40.106Z"
        scheduleInterval:
          type: string
          enum: [ONE_TIME, DAILY, WEEKLY, MONTHLY]
          description: Schedule for recurring exports
          example: "ONE_TIME"
        reoccuringInterval:
          type: string
          nullable: true
          description: Recurring interval details (null for ONE_TIME)
        effectiveFrom:
          type: string
          format: date-time
          description: When the recurring schedule starts
          example: "2020-11-06T19:09:40.106Z"
        effectiveTo:
          type: string
          format: date-time
          description: When the recurring schedule ends
          example: "2020-11-12T19:09:40.106Z"
        lastQueuedAt:
          type: string
          format: date-time
          nullable: true
          description: When the request was last queued
        serviceGroups:
          type: array
          items:
            type: string
            enum: [admin, issues, cost]
          description: Services included in the export
          example: ["admin", "issues"]
        callbackUrl:
          type: string
          format: uri
          description: URL to receive callback when export completes
        sendEmail:
          type: boolean
          description: Send email notification on completion
          example: true
        startDate:
          type: string
          format: date-time
          description: Start date for data export range
          example: "2023-06-06T00:00:00.000Z"
        endDate:
          type: string
          format: date-time
          description: End date for data export range
          example: "2023-06-06T12:00:00.000Z"
        dateRange:
          type: string
          enum: [LAST_WEEK, LAST_MONTH, LAST_QUARTER, CUSTOM]
          description: Predefined date range
          example: "LAST_MONTH"
        projectStatus:
          type: string
          enum: [active, inactive, pending]
          description: Filter projects by status
          example: "active"
      required:
        - id
        - description
        - isActive
        - accountId
        - createdBy
        - createdByEmail
        - createdAt
        - scheduleInterval
        - serviceGroups
        - sendEmail

    DataConnectorJob:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique job ID
          example: "a88c536d-1f28-4d33-97ed-7d484d462c66"
        requestId:
          type: string
          format: uuid
          description: ID of the request that spawned this job
          example: "c8af2612-774b-432a-a6c7-69c8b636ae18"
        accountId:
          type: string
          format: uuid
          description: Account ID
          example: "ff6f7683-db6a-4dd7-8c11-27227b336995"
        projectId:
          type: string
          format: uuid
          nullable: true
          description: Project ID (null for account-wide jobs)
        projectIdList:
          type: string
          nullable: true
          description: Comma-separated list of project IDs
        createdBy:
          type: string
          format: uuid
          description: User ID who created the job
        createdByEmail:
          type: string
          format: email
          description: Email of user who created the job
        createdAt:
          type: string
          format: date-time
          description: When the job was created
          example: "2020-11-06T19:09:40.106Z"
        status:
          type: string
          enum: [queued, running, complete]
          description: Current status of the job
          example: "complete"
        completionStatus:
          type: string
          enum: [success, failed, cancelled]
          description: Completion status (only present when status is complete)
          example: "success"
        startedAt:
          type: string
          format: date-time
          nullable: true
          description: When the job started processing
          example: "2020-11-06T19:10:40.106Z"
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: When the job completed
          example: "2020-11-06T19:15:40.106Z"
        sendEmail:
          type: boolean
          description: Whether to send email notification
          example: true
        progress:
          type: string
          description: Progress information
          example: "100%"
        lastDownloadedBy:
          type: string
          format: uuid
          nullable: true
          description: User ID who last downloaded the data
        lastDownloadedAt:
          type: string
          format: date-time
          nullable: true
          description: When the data was last downloaded
        startDate:
          type: string
          format: date-time
          description: Start date for data export range
          example: "2023-06-06T00:00:00.000Z"
        endDate:
          type: string
          format: date-time
          description: End date for data export range
          example: "2023-06-06T12:00:00.000Z"
        data:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: File name (typically a ZIP file)
                example: "export_data.zip"
          description: Available data files for download
      required:
        - id
        - requestId
        - accountId
        - createdBy
        - createdByEmail
        - createdAt
        - status
        - sendEmail

    DetailedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user ID
          example: "95bf3ff3-419b-4c32-88b1-02e5b05be46e"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@company.com"
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        autodeskId:
          type: string
          description: Autodesk account ID
          example: "ABCD1234"
        analyticsId:
          type: string
          description: Analytics tracking ID
        addressLine1:
          type: string
          description: Primary address line
        addressLine2:
          type: string
          description: Secondary address line
        city:
          type: string
          description: City
        stateOrProvince:
          type: string
          description: State or province
        postalCode:
          type: string
          description: Postal/ZIP code
        country:
          type: string
          description: Country
        imageUrl:
          type: string
          format: uri
          description: URL to user's profile image
        phone:
          type: object
          properties:
            number:
              type: string
              description: Phone number
            phoneType:
              type: string
              enum: [home, mobile, office]
              description: Type of phone
            extension:
              type: string
              description: Phone extension
        jobTitle:
          type: string
          description: User's job title
        industry:
          type: string
          description: Industry the user works in
        aboutMe:
          type: string
          description: User's bio or description
        status:
          type: string
          enum: [active, pending, inactive]
          description: User's status
          example: "active"
        companyId:
          type: string
          format: uuid
          description: Company ID the user belongs to
        defaultRoleId:
          type: string
          format: uuid
          description: Default role ID for the user
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated
      required:
        - id
        - email
        - status

    ProductAccessArray:
      type: array
      minItems: 12
      maxItems: 12
      description: |
        Must include all 12 product keys with strict business rules:
        - Docs and insight are MANDATORY and cannot be 'none' (required for ACC project participation)
        - Other products may be set to 'none' if not purchased by company/project
        - ProjectAdministration cannot be 'member'  
        - If projectAdministration is 'administrator', all others must be 'administrator' or 'none'
        - If projectAdministration is 'none', all others must be 'member' or 'none'
        
        Note: Product access rules may vary by organization
        
        IMPORTANT: Do not automatically grant access to all products. Companies/projects 
        may not have purchased all products. Set products to 'none' if the user is not 
        provisioned for that specific product, while still including all 12 product keys 
        in the request.
      items:
        type: object
        properties:
          key:
            type: string
            enum:
              - projectAdministration
              - docs
              - insight
              - takeoff
              - designCollaboration
              - modelCoordination
              - build
              - autoSpecs
              - cost
              - financials
              - capitalPlanning
              - buildingConnected
          access:
            type: string
            enum: [administrator, member, none]
            description: |
              User's access level to the product:
              - administrator: Full administrative access
              - member: Standard member access  
              - none: No access to the product
        required:
          - key
          - access
        allOf:
          - if:
              properties:
                key:
                  const: projectAdministration
            then:
              properties:
                access:
                  enum: [administrator, none]
          - if:
              properties:
                key:
                  enum: [docs, insight]
            then:
              properties:
                access:
                  enum: [administrator, member]
              description: |
                Docs and insight are MANDATORY for ACC project participation and cannot be set to 'none'
      allOf:
        - if:
            contains:
              type: object
              properties:
                key:
                  const: projectAdministration
                access:
                  const: administrator
          then:
            items:
              allOf:
                - if:
                    properties:
                      key:
                        not:
                          const: projectAdministration
                  then:
                    properties:
                      access:
                        const: administrator
        - if:
            contains:
              type: object
              properties:
                key:
                  const: projectAdministration
                access:
                  const: none
          then:
            items:
              allOf:
                - if:
                    properties:
                      key:
                        not:
                          const: projectAdministration
                  then:
                    properties:
                      access:
                        const: member

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [active, pending, inactive]
        company_id:
          type: string
          format: uuid
        role:
          type: string
        phone:
          type: string
        job_title:
          type: string
        industry:
          type: string
        about_me:
          type: string
        image_url:
          type: string
          format: uri

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [active, inactive, pending]
        type:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        projectValue:
          type: object
          properties:
            value:
              type: number
            currency:
              type: string
        jobNumber:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        stateOrProvince:
          type: string
        postalCode:
          type: string
        country:
          type: string
        timezone:
          type: string
        constructionType:
          type: string
        deliveryMethod:
          type: string
        currentPhase:
          type: string
        template:
          type: object
          properties:
            projectId:
              type: string
              format: uuid

    ProjectUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role_id:
          type: string
          format: uuid
        company_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, pending, inactive]
        products:
          $ref: '#/components/schemas/ProductAccessArray'